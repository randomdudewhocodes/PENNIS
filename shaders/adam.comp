#version 450

layout(local_size_x = 256) in;

layout(set = 0, binding = 0) buffer Vars  { float var[]; };
layout(set = 0, binding = 1) buffer Grads { float grad[]; };
layout(set = 0, binding = 2) buffer Mbuf  { float m[]; };
layout(set = 0, binding = 3) buffer Vbuf  { float v[]; };

struct AdamParams
{
    float beta1,
          beta2,
          epsilon,
          learningRate;
};

layout(push_constant) uniform PushConstants {
    AdamParams adamParams;
    uint t;
    uint size;
} push;

void main()
{
    uint id = gl_GlobalInvocationID.x;
    if(id >= push.size) return;

    AdamParams adamParams = push.adamParams;

    m[id] = mix(grad[id],            m[id], adamParams.beta1);
    v[id] = mix(grad[id] * grad[id], v[id], adamParams.beta2);
    float m_hat = m[id] / (1 - pow(adamParams.beta1, float(push.t)));
    float v_hat = v[id] / (1 - pow(adamParams.beta2, float(push.t)));
    var[id] -= adamParams.learningRate * m_hat / (sqrt(v_hat) + adamParams.epsilon);
}